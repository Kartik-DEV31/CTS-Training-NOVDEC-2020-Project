package managmentApplication.applicationService;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import managmentApplication.RestaurantChainManagmentApplication.RestaurantRepository;
import managmentApplication.RestaurantChainManagmentApplication.SpecificRestaurantRepository;
import managmentApplication.applicationModel.RestaurantDetails;
import managmentApplication.applicationModel.SpecificRestaurantDetails;

@Service
public class RestaurantDetailsManagingOperationsImpl implements RestaurantDetailsManagingOperations {
@Autowired
RestaurantRepository repo;
@Autowired
SpecificRestaurantRepository srepo;	
	
	@Override
	public void addOwner(Integer id,String restaurantOwner,String password) throws Exception {
		RestaurantDetails e = new RestaurantDetails( id,restaurantOwner, password);
		
		List<RestaurantDetails> data = new ArrayList<RestaurantDetails>();
		data.add(e);
	
		
		if (repo.saveAll(data).isEmpty())
		{
			throw new Exception("IDALreadyExistException");
		}
		
		
	}

	@Override
	public List<RestaurantDetails> getAllRestaurants() throws Exception {
		
		if(repo.findAll().isEmpty())
			throw new Exception("TableEmptyException");
		
		else
		return repo.findAll() ;
	}

	@Override
	public void updateRestaurantOwnerName(String ownerName) {
		
		repo.updateOwnerName(ownerName);
		
		
	}

	@Override
	@Transactional
	public void deleteRestaurant(Integer ownerId) throws Exception {
		
		if(repo.findById(ownerId).isEmpty())
			throw new Exception("OwnerNotRegisteredException");
		
		else {
			repo.deleteById(ownerId);
			
			srepo.deleteOwner(ownerId);
		}
		
		
	}

	@Override
	public Optional<RestaurantDetails> getRestaurant() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void addRestaurant(Integer ownerId, String restaurantName, String foodServed, Integer employeeCount,
			Double revenue) throws Exception {
		SpecificRestaurantDetails se = new SpecificRestaurantDetails(ownerId, restaurantName, foodServed,employeeCount,revenue);
		
		List<SpecificRestaurantDetails> data2 = new ArrayList<SpecificRestaurantDetails>();
		data2.add(se);
	
		if(repo.findById(ownerId).isEmpty())
			throw new Exception("OwnerNotRegisteredException");
		
		else
		srepo.saveAll(data2);
		
		
		
	}

}
